name: automated tagging

on:
  workflow_dispatch:
    inputs:
      selection:
        description: 'Select Mini App:'
        required: true
        type: choice
        options:
          - p2p
          - cdd
      version_bump:
        description: 'Version bump type (major, minor, patch):'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get Latest Version Tag
        id: get_latest
        run: |
          # Get latest tag for the selected app
          TAG_PREFIX="${{ github.event.inputs.selection }}/v"
          LATEST_TAG=$(git tag --list "${TAG_PREFIX}*" | sort -V | tail -n1)

          if [ -z "$LATEST_TAG" ]; then
            echo "No existing tag found. Using default version 0.0.0"
            echo "version=0.0.0" >> "$GITHUB_OUTPUT"
          else
            VERSION=${LATEST_TAG##*/v}  # Strip prefix
            echo "Found latest version: $VERSION"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          fi

      - name: Calculate Next Version
        id: bump
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ steps.get_latest.outputs.version }}"
          case "${{ github.event.inputs.version_bump }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create and Push Tag
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ github.event.inputs.selection }}/v${{ steps.bump.outputs.new_version }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push https://x-access-token:${TOKEN}@github.com/${{ github.repository }}.git --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ github.event.inputs.selection }}/v${{ steps.bump.outputs.new_version }}"
          release_name: "Release ${{ github.event.inputs.selection }}/v${{ steps.bump.outputs.new_version }}"
          body: "Description of the changes in this release"
